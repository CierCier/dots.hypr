#!/usr/bin/env bash


print_help(){
	echo "Usage: wallpaper <options> [image_path]"
	echo "Options:"
	echo "  -h,	--help: Show this help message"
	echo "  -c,	--crop: Crop the image to fit the screen"
	echo "  -f,	--fit: Resize the image to fit the screen"
	echo "  -s,	--stretch: Stretch the image to fit the screen"
	echo "  -wa,	--wal-args: Pass additional arguments to wal"
	exit 0
}

file_picker(){
    path=$(xdg-user-dir PICTURES)
    if [ -z $path ]; then
	path=$HOME
    fi
    if [ -d $path/Wallpapers ]; then
	path=$path/Wallpapers
    elif [ -d $path/wallpapers ]; then
	path=$path/wallpapers
    fi
    img_path=$(zenity --file-selection --filename=$path --file-filter='*.png *.jpg *.jpeg *.gif *.mp4 *.webm *.mkv')

    echo $img_path
}


resize=crop
image_path=""
other_args=()
wal_args=()

while [ "$1" != "" ]; do
    case $1 in
	-h | --help)
	    print_help
	    ;;
	-c | --crop)
	    resize=crop
	    ;;
	-f | --fit)
	    resize=fit
	    ;;
	-s | --stretch)
	    resize=stretch
	    ;;
	-wa | --wal-args)
	    wal_args+=($2)
	    shift
	    ;;
	*)
	    other_args+=($1)
	    ;;
    esac
    shift
done

img_path=${other_args[0]}
other_args=("${other_args[@]:1}")

if [ -z $img_path ]; then
	img_path=$(file_picker)
fi


if [ ! -f "$img_path" ]; then
	echo "File not found: $img_path"
	exit 1
fi

if [ -z $WAL_BACKEND ]; then
	WAL_BACKEND=haishoku
fi

no_stdout () {
	"$@" > /dev/null 2>&1
}

generate_colors(){
    no_stdout wal $wal_args -s -t  --backend $WAL_BACKEND -i $1
}

generate_thumbnail(){
    video=$1
    if [ -f /tmp/$(whoami)-thumbnail.png ]; then
		rm /tmp/$(whoami)-thumbnail.png
    fi
    no_stdout ffmpeg -i $video -vf "thumbnail" -frames:v 1 /tmp/$(whoami)-thumbnail.png
} 

use_swww(){
    pkill mpvpaper
    no_stdout swww img --filter Lanczos3 --resize $resize --transition-duration 1 --transition-type center "$img_path"
}


use_mpv(){
    outputs=$(hyprctl monitors -j |  jq ".[].name")
    width=$(hyprctl monitors -j | jq ".[].width" | sort -n | head -n 1)
    height=$(hyprctl monitors -j | jq ".[].height" | sort -n | head -n 1)

    v_width=$(ffprobe -v error -select_streams v:0 -show_entries stream=width -of csv=s=x:p=0 "$img_path")
    v_height=$(ffprobe -v error -select_streams v:0 -show_entries stream=height -of csv=s=x:p=0 "$img_path")
    
    if [ $v_width -gt $width ]; then
	echo "Scaling video to $width:$height"
	no_stdout ffmpeg -i "$img_path" -vf "scale=$width:$height:force_original_aspect_ratio=decrease,pad=$width:$height:(ow-iw)/2:(oh-ih)/2" /tmp/$(whoami)-scaled.mp4
	video=/tmp/$(whoami)-scaled.mp4
    else
	video=$img_path
    fi

    for output in $outputs;
    do
	no_stdout mpvpaper -s -o "no-audio loop" "$output" $video & disown
    done
}

file_type=$(file -b --mime-type "$img_path")

case $file_type in
	image/*)
		generate_colors "$img_path"
		use_swww
		;;
	video/*)
		generate_thumbnail "$img_path"
		generate_colors "/tmp/$(whoami)-thumbnail.png"
		use_mpv
		;;
	*)
		echo "Unsupported file type: $file_type"
		exit 1
		;;
esac


# update hyprland templates

hypr_colors_template="$HOME/.config/hypr/templates/hyprland/colors.conf"
hyprlock_template="$HOME/.config/hypr/templates/hyprlock.conf"

cp $hypr_colors_template /tmp/colors.conf
cp $hyprlock_template /tmp/lock.conf

source $HOME/.cache/wal/colors.sh

for color in {1..16}; do
	eval "currentColor=\$color$color"
	currentColor=$(echo $currentColor | tr -d '#')
	sed -i "s/{{ \$color$color }}/$currentColor/g" /tmp/colors.conf
	sed -i "s/{{ \$color$color }}/$currentColor/g" /tmp/lock.conf
done

background=$(echo $background | tr -d '#')
foreground=$(echo $foreground | tr -d '#')

sed -i "s/{{ \$background }}/$background/g" /tmp/colors.conf
sed -i "s/{{ \$background }}/$background/g" /tmp/lock.conf

sed -i "s/{{ \$foreground }}/$foreground/g" /tmp/colors.conf
sed -i "s/{{ \$foreground }}/$foreground/g" /tmp/lock.conf

sed -i "s@{{ \$wallpaper }}@$wallpaper@g" /tmp/lock.conf


cp /tmp/colors.conf $HOME/.config/hypr/hyprland/colors.conf
cp /tmp/lock.conf $HOME/.config/hypr/hyprlock.conf

hyprctl reload
